#define photon_cxx
#include "photon.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
float c=3*pow(10,8);
void photon::Loop()
{
//   In a ROOT session, you can do:
//      root> .L photon.C
//      root> photon t
//      root> t.GetEntry(12); // Fill t data members with entry number 12
//      root> t.Show();       // Show values of entry 12
//      root> t.Show(16);     // Read and show values of entry 16
//      root> t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;
   auto h = new TH1F("h","graph",200,0,200);
   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      if(nPho>1){
	int mag;
TLorentzVector v1,v2;
 v1.SetPtEtaPhiE(phoEt->at(0)/c,phoEta->at(0),phoPhi->at(0),phoE->at(0));
      v2.SetPtEtaPhiE(phoEt->at(1)/c,phoEta->at(1),phoPhi->at(1),phoE->at(1));  
      mag=(v1+v2).M();
      h->Fill(mag);
      cout<<mag<<endl;
 }
   }
   h->Draw();
}
